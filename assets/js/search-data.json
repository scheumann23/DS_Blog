{
  
    
        "post0": {
            "title": "Final Project",
            "content": "import warnings warnings.filterwarnings(&#39;ignore&#39;) . Load Data . import pandas as pd . data = pd.read_csv(r&#39;Data/Tweets.csv&#39;) . Data Description . The data used for this project contains 14,640 tweets about several different US airlines. The data was gathered in February of 2015. The full data set contains the text of the tweet as well as several pieces of metadata for each tweet, such as the name of the user writing the tweet, which airline the tweet is about, and when and where the tweet was sent. In addition, each tweet has been labeled with either positive, neutral, or negative sentiment along with a confidence score for the sentiment. Whenever the sentiment is labeled as negative, the file also lists a reason for the negative sentiment, such as &quot;Bad Flight&quot; or &quot;Customer Service.&quot; This project will focus solely on the sentiment labels and the text of each tweet. . Data Pre-Processing . import numpy as np from copy import deepcopy . y = data[&#39;airline_sentiment&#39;] . import nltk from nltk.tokenize import word_tokenize from nltk.stem.wordnet import WordNetLemmatizer . This function processes the raw tweet data. It makes all letters lowercase, removes all stop words and punctuation, and lemmatizes each word in each tweet. . lemmatizer = WordNetLemmatizer() stop_words = nltk.corpus.stopwords.words(&#39;english&#39;) stop_words.append(&#39;http&#39;) def clean_up_text(text): X = [tweet.lower() for tweet in text] X = [word_tokenize(tweet) for tweet in X] X = [tweet[2:] for tweet in X] temp = [] for tweet in X: temp2 = [] for token in tweet: if token not in stop_words and token.isalpha(): temp2.append(lemmatizer.lemmatize(token)) temp.append(temp2) X = [&#39; &#39;.join(tweet) for tweet in temp] return np.array(X) . X = clean_up_text(data[&#39;text&#39;]) . Sentiment Labels . The data used for this project was already labeled with with positive, neutral, or negative sentiment. . positive_count = sum([1 if label == &#39;positive&#39; else 0 for label in y]) neutral_count = sum([1 if label == &#39;neutral&#39; else 0 for label in y]) negative_count = sum([1 if label == &#39;negative&#39; else 0 for label in y]) print(positive_count, neutral_count, negative_count) . 2363 3099 9178 . Out of the 14,640 total tweets in the data set, 2,363 have positive sentiment, 3,099 have neutral sentiment, and 9,178 have negative sentiment . Train-Test Data Split . from sklearn.model_selection import train_test_split . X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 23) . Data Vectorization . Several different term-document matrices are created. The first three are trained on the whole data set, but fit on just the positive, neutral, and negative tweets. These matrices will then be used in the Topic Analysis section of the project. The final two are trained on the training set created in the cell above and fit to the training data and the test data. . from sklearn.feature_extraction.text import CountVectorizer import sklearn . cv_full = CountVectorizer(max_df = 0.95) . cv_full.fit([tweet for tweet in X]) . CountVectorizer(max_df=0.95) . pos_tweets = X[y == &#39;positive&#39;] neut_tweets = X[y == &#39;neutral&#39;] neg_tweets = X[y == &#39;negative&#39;] pos_mat = cv_full.transform(pos_tweets).toarray() neut_mat = cv_full.transform(neut_tweets).toarray() neg_mat = cv_full.transform(neg_tweets).toarray() . cv_train = CountVectorizer(max_df = 0.95) cv_train.fit([tweet for tweet in X_train]) cv_train_mat = cv_train.transform([tweet for tweet in X_train]).toarray() cv_test_mat = cv_train.transform([tweet for tweet in X_test]).toarray() . Topic Analysis . from sklearn.decomposition import LatentDirichletAllocation from wordcloud import WordCloud import matplotlib.pyplot as plt . The data is split into three groups based on the sentiment label. For each group of tweets, an LDA model is trained to generate 3 topics. . num_topics = 3 . pos_lda = LatentDirichletAllocation(n_components = num_topics) neut_lda = LatentDirichletAllocation(n_components = num_topics) neg_lda = LatentDirichletAllocation(n_components = num_topics) . pos_lda.fit(pos_mat) neut_lda.fit(neut_mat) neg_lda.fit(neg_mat) . LatentDirichletAllocation(n_components=3) . The following function returns the top n tokens from a given topic in a given model as well as the component of the model for that particular token. . def top_words(num_words, model, topic_num, vocab): top_list = np.argsort(model.components_[topic_num])[-num_words:] return [(vocab[i], model.components_[topic_num][i]) for i in top_list] . Positive Tweets . top_pos_words = [] for topic in range(num_topics): top_pos_words.append(top_words(20, pos_lda, topic, cv_full.get_feature_names())) . for i in range(num_topics): top_pos_dict = {} for word in top_pos_words[i]: top_pos_dict[word[0]] = word[1] wc = WordCloud(background_color = &#39;white&#39;) wc.generate_from_frequencies(top_pos_dict) plt.imshow(wc, interpolation=&#39;bilinear&#39;) plt.axis(&quot;off&quot;) print(f&#39;Topic {i+1}&#39;) plt.show() . Topic 1 . Topic 2 . Topic 3 . Neutral Tweets . top_neut_words = [] for topic in range(num_topics): top_neut_words.append(top_words(20, neut_lda, topic, cv_full.get_feature_names())) . for i in range(num_topics): top_neut_dict = {} for word in top_neut_words[i]: top_neut_dict[word[0]] = word[1] wc = WordCloud(background_color = &#39;white&#39;) wc.generate_from_frequencies(top_neut_dict) plt.imshow(wc, interpolation=&#39;bilinear&#39;) plt.axis(&quot;off&quot;) print(f&#39;Topic {i+1}&#39;) plt.show() . Topic 1 . Topic 2 . Topic 3 . Negative Tweets . top_neg_words = [] for topic in range(num_topics): top_neg_words.append(top_words(20, neg_lda, topic, cv_full.get_feature_names())) . for i in range(num_topics): top_neg_dict = {} for word in top_neg_words[i]: top_neg_dict[word[0]] = word[1] wc = WordCloud(background_color = &#39;white&#39;) wc.generate_from_frequencies(top_neg_dict) plt.imshow(wc, interpolation=&#39;bilinear&#39;) plt.axis(&quot;off&quot;) print(f&#39;Topic {i+1}&#39;) plt.show() . Topic 1 . Topic 2 . Topic 3 . Topic Descriptions . For the three positive class topics, the most common word among all three topics is the word &#39;thanks.&#39; This shows that when an airline can make their customers happy, those same customers are often grateful in response. It is also interesting that JetBlue is the only airline that had their name show up in the top words for positive tweets. . For the netural tweets, the word the sticks out the most is the word &#39;flight&#39; which makes sense considering these are all tweets about airlines. It is interesting the the word &#39;cancelled&#39; appeard in topic 2 even though these are supposedly neutral tweets. Topic 3 is different than the other two in that the prominent words, &#39;would,&#39; &#39;go,&#39; and &#39;dm&#39; don&#39;t appear to have much to do with an airline. In addition, &#39;destinationdragons&#39; appears. Perhaps one of the airlines had a special promotion with Imagine Dragons. Again, JetBlue appears in the top words to neutral tweets further indicating that, at least in this data set, JetBlue appears to be the most well liked airline. . The top words for the negative tweet topics are consistent with what one might expect. Words such as &#39;service&#39; and &#39;cancelled&#39; as well as &#39;gate&#39; and &#39;bag&#39; are all prominent. It should also be noted that United appears in Topic 1, which suggests that United Airlines is not coming across very well in the data set. The word &#39;flight&#39; is the most common word in both Topic 2 and Topic 3. Performing the topic analysis using bi-grams in addition to uni-grams could help explain what about the flight in particular was bad. . Sentiment Analysis . from sklearn.svm import SVC from sklearn.linear_model import LogisticRegression from sklearn.naive_bayes import MultinomialNB as MNB from sklearn.metrics import accuracy_score from sklearn.metrics import confusion_matrix from sklearn.model_selection import GridSearchCV . SVM . svm_class = SVC() . svm_class.fit(cv_train_mat, y_train) . SVC() . svm_pred = svm_class.predict(cv_test_mat) . Logistic Regression . parameters = {&#39;C&#39;:[0.01, 0.1, 1, 10, 100], &#39;penalty&#39;: [&#39;l1&#39;, &#39;l2&#39;]} log_reg = LogisticRegression() lr = GridSearchCV(log_reg, parameters) . lr.fit(cv_train_mat, y_train) . GridSearchCV(estimator=LogisticRegression(), param_grid={&#39;C&#39;: [0.01, 0.1, 1, 10, 100], &#39;penalty&#39;: [&#39;l1&#39;, &#39;l2&#39;]}) . print(lr.get_params()[&#39;estimator__C&#39;]) print(lr.get_params()[&#39;estimator__penalty&#39;]) . 1.0 l2 . The best value for C is 1.0 and the best penalty is l2 . log_reg_pred = lr.predict(cv_test_mat) . Naive Bayes . mnb = MNB() . mnb.fit(cv_train_mat, y_train) . MultinomialNB() . nb_pred = mnb.predict(cv_test_mat) . Sentiment Analysis Model Evaluation . SVM . score = accuracy_score(y_test, svm_pred) print(score) . 0.7759562841530054 . cm = confusion_matrix(y_test, svm_pred) cm = pd.DataFrame(cm, columns = [&#39;Negative&#39;, &#39;Neutral&#39;, &#39;Positive&#39;], index = [&#39;Negative&#39;, &#39;Neutral&#39;, &#39;Positive&#39;]) cm . Negative Neutral Positive . Negative 1659 | 125 | 30 | . Neutral 250 | 318 | 39 | . Positive 140 | 72 | 295 | . Logistic Regression . score = accuracy_score(y_test, log_reg_pred) print(score) . 0.7899590163934426 . cm = confusion_matrix(y_test, log_reg_pred) cm = pd.DataFrame(cm, columns = [&#39;Negative&#39;, &#39;Neutral&#39;, &#39;Positive&#39;], index = [&#39;Negative&#39;, &#39;Neutral&#39;, &#39;Positive&#39;]) cm . Negative Neutral Positive . Negative 1610 | 152 | 52 | . Neutral 205 | 352 | 50 | . Positive 85 | 71 | 351 | . Naive Bayes . score = accuracy_score(y_test, nb_pred) print(score) . 0.7674180327868853 . cm = confusion_matrix(y_test, nb_pred) cm = pd.DataFrame(cm, columns = [&#39;Negative&#39;, &#39;Neutral&#39;, &#39;Positive&#39;], index = [&#39;Negative&#39;, &#39;Neutral&#39;, &#39;Positive&#39;]) cm . Negative Neutral Positive . Negative 1717 | 67 | 30 | . Neutral 329 | 231 | 47 | . Positive 163 | 45 | 299 | . Conclusion . For the three topics created within each set of tweets, there didn&#39;t appear to be much distinction between each topic. There were a few that had several unique words, but each topic failed to identify anything fundamentally different that the others. When looking at the topics between each cateogry, however, it is clear that there are certain words associated with positive versus neutral verus negative tweets. Positive tweets contain language evoking gratitude and overall positive words like awesome, great, and love. Negative tweets, on the other hand, often used works like cancelled, late, delayed, and worst. . All three methods for predicting sentiment on the test set of tweets resulted in very similar accuracy results with Logistic Regression proving to be the best model. The Support Vector Machine model took much longer to train than the other two, approximately 30 minutes, and yet the results are very much in line with the simpler models. After running GridSeachCV for Logistic Regression with varying values for C and different penalties, it turns out that the best performing parameters were also the default parameters. A further improvement could be to increase the various values for each parameter to see if any improvements could be found. . It should also be noted a pipeline to scale the inputs for each model was used at first, but was later dropped after it was found to decrease the accuracy scores. . References . The data for the project came from this website: https://www.kaggle.com/crowdflower/twitter-airline-sentiment. . For the sklearn models I consulted the sklearn documentation: . LDA: https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.LatentDirichletAllocation.html | SVM: https://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html#sklearn.svm.SVC | Logistic Regression: https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html | Naive Bayes: https://scikit-learn.org/stable/modules/generated/sklearn.naive_bayes.MultinomialNB.html | . In order to create the word clouds I referenced both the wordcloud documentation: https://amueller.github.io/word_cloud/generated/wordcloud.WordCloud.html#wordcloud.WordCloud as well as the datacamp course: https://campus.datacamp.com/courses/sentiment-analysis-in-python. In particular I referenced the &#39;Word Cloud on Movie Reviews&#39; section in part 1 - &#39;Sentiment Analysis Nuts and Bolts.&#39; .",
            "url": "https://neelan.dev/2020/12/18/NLP-Final-Project.html",
            "relUrl": "/2020/12/18/NLP-Final-Project.html",
            "date": " • Dec 18, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://neelan.dev/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://neelan.dev/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "I am Neelan Scheumann and I .",
          "url": "https://neelan.dev/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://neelan.dev/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}