{
  
    
        "post0": {
            "title": "Final Project",
            "content": "import warnings warnings.filterwarnings(&#39;ignore&#39;) . Load Data . import pandas as pd . data = pd.read_csv(r&#39;Data/Tweets.csv&#39;) . Data Description . The data used for this project contains 14,640 tweets about several different US airlines. The data was gathered in February of 2015. The full data set contains the text of the tweet as well as several pieces of metadata for each tweet, such as the name of the user writing the tweet, which airline the tweet is about, and when and where the tweet was sent. In addition, each tweet has been labeled with either positive, neutral, or negative sentiment along with a confidence score for the sentiment. Whenever the sentiment is labeled as negative, the file also lists a reason for the negative sentiment, such as &quot;Bad Flight&quot; or &quot;Customer Service.&quot; This project will focus solely on the sentiment labels and the text of each tweet. . Data Pre-Processing . import numpy as np from copy import deepcopy . y = data[&#39;airline_sentiment&#39;] . import nltk from nltk.tokenize import word_tokenize from nltk.stem.wordnet import WordNetLemmatizer . This function processes the raw tweet data. It makes all letters lowercase, removes all stop words and punctuation, and lemmatizes each word in each tweet. . lemmatizer = WordNetLemmatizer() stop_words = nltk.corpus.stopwords.words(&#39;english&#39;) stop_words.append(&#39;http&#39;) def clean_up_text(text): X = [tweet.lower() for tweet in text] X = [word_tokenize(tweet) for tweet in X] X = [tweet[2:] for tweet in X] temp = [] for tweet in X: temp2 = [] for token in tweet: if token not in stop_words and token.isalpha(): temp2.append(lemmatizer.lemmatize(token)) temp.append(temp2) X = [&#39; &#39;.join(tweet) for tweet in temp] return np.array(X) . X = clean_up_text(data[&#39;text&#39;]) . Sentiment Labels . The data used for this project was already labeled with with positive, neutral, or negative sentiment. . positive_count = sum([1 if label == &#39;positive&#39; else 0 for label in y]) neutral_count = sum([1 if label == &#39;neutral&#39; else 0 for label in y]) negative_count = sum([1 if label == &#39;negative&#39; else 0 for label in y]) print(positive_count, neutral_count, negative_count) . 2363 3099 9178 . Out of the 14,640 total tweets in the data set, 2,363 have positive sentiment, 3,099 have neutral sentiment, and 9,178 have negative sentiment . Train-Test Data Split . from sklearn.model_selection import train_test_split . X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 23) . Data Vectorization . Several different term-document matrices are created. The first three are trained on the whole data set, but fit on just the positive, neutral, and negative tweets. These matrices will then be used in the Topic Analysis section of the project. The final two are trained on the training set created in the cell above and fit to the training data and the test data. . from sklearn.feature_extraction.text import CountVectorizer import sklearn . cv_full = CountVectorizer(max_df = 0.95) . cv_full.fit([tweet for tweet in X]) . CountVectorizer(max_df=0.95) . pos_tweets = X[y == &#39;positive&#39;] neut_tweets = X[y == &#39;neutral&#39;] neg_tweets = X[y == &#39;negative&#39;] pos_mat = cv_full.transform(pos_tweets).toarray() neut_mat = cv_full.transform(neut_tweets).toarray() neg_mat = cv_full.transform(neg_tweets).toarray() . cv_train = CountVectorizer(max_df = 0.95) cv_train.fit([tweet for tweet in X_train]) cv_train_mat = cv_train.transform([tweet for tweet in X_train]).toarray() cv_test_mat = cv_train.transform([tweet for tweet in X_test]).toarray() . Topic Analysis . from sklearn.decomposition import LatentDirichletAllocation from wordcloud import WordCloud import matplotlib.pyplot as plt . The data is split into three groups based on the sentiment label. For each group of tweets, an LDA model is trained to generate 3 topics. . num_topics = 3 . pos_lda = LatentDirichletAllocation(n_components = num_topics) neut_lda = LatentDirichletAllocation(n_components = num_topics) neg_lda = LatentDirichletAllocation(n_components = num_topics) . pos_lda.fit(pos_mat) neut_lda.fit(neut_mat) neg_lda.fit(neg_mat) . LatentDirichletAllocation(n_components=3) . The following function returns the top n tokens from a given topic in a given model as well as the component of the model for that particular token. . def top_words(num_words, model, topic_num, vocab): top_list = np.argsort(model.components_[topic_num])[-num_words:] return [(vocab[i], model.components_[topic_num][i]) for i in top_list] . Positive Tweets . top_pos_words = [] for topic in range(num_topics): top_pos_words.append(top_words(20, pos_lda, topic, cv_full.get_feature_names())) . for i in range(num_topics): top_pos_dict = {} for word in top_pos_words[i]: top_pos_dict[word[0]] = word[1] wc = WordCloud(background_color = &#39;white&#39;) wc.generate_from_frequencies(top_pos_dict) plt.imshow(wc, interpolation=&#39;bilinear&#39;) plt.axis(&quot;off&quot;) print(f&#39;Topic {i+1}&#39;) plt.show() . Topic 1 . Topic 2 . Topic 3 . Neutral Tweets . top_neut_words = [] for topic in range(num_topics): top_neut_words.append(top_words(20, neut_lda, topic, cv_full.get_feature_names())) . for i in range(num_topics): top_neut_dict = {} for word in top_neut_words[i]: top_neut_dict[word[0]] = word[1] wc = WordCloud(background_color = &#39;white&#39;) wc.generate_from_frequencies(top_neut_dict) plt.imshow(wc, interpolation=&#39;bilinear&#39;) plt.axis(&quot;off&quot;) print(f&#39;Topic {i+1}&#39;) plt.show() . Topic 1 . Topic 2 . Topic 3 . Negative Tweets . top_neg_words = [] for topic in range(num_topics): top_neg_words.append(top_words(20, neg_lda, topic, cv_full.get_feature_names())) . for i in range(num_topics): top_neg_dict = {} for word in top_neg_words[i]: top_neg_dict[word[0]] = word[1] wc = WordCloud(background_color = &#39;white&#39;) wc.generate_from_frequencies(top_neg_dict) plt.imshow(wc, interpolation=&#39;bilinear&#39;) plt.axis(&quot;off&quot;) print(f&#39;Topic {i+1}&#39;) plt.show() . Topic 1 . Topic 2 . Topic 3 . Topic Descriptions . For the three positive class topics, the most common word among all three topics is the word &#39;thanks.&#39; This shows that when an airline can make their customers happy, those same customers are often grateful in response. It is also interesting that JetBlue is the only airline that had their name show up in the top words for positive tweets. . For the netural tweets, the word the sticks out the most is the word &#39;flight&#39; which makes sense considering these are all tweets about airlines. It is interesting the the word &#39;cancelled&#39; appeard in topic 2 even though these are supposedly neutral tweets. Topic 3 is different than the other two in that the prominent words, &#39;would,&#39; &#39;go,&#39; and &#39;dm&#39; don&#39;t appear to have much to do with an airline. In addition, &#39;destinationdragons&#39; appears. Perhaps one of the airlines had a special promotion with Imagine Dragons. Again, JetBlue appears in the top words to neutral tweets further indicating that, at least in this data set, JetBlue appears to be the most well liked airline. . The top words for the negative tweet topics are consistent with what one might expect. Words such as &#39;service&#39; and &#39;cancelled&#39; as well as &#39;gate&#39; and &#39;bag&#39; are all prominent. It should also be noted that United appears in Topic 1, which suggests that United Airlines is not coming across very well in the data set. The word &#39;flight&#39; is the most common word in both Topic 2 and Topic 3. Performing the topic analysis using bi-grams in addition to uni-grams could help explain what about the flight in particular was bad. . Sentiment Analysis . from sklearn.svm import SVC from sklearn.linear_model import LogisticRegression from sklearn.naive_bayes import MultinomialNB as MNB from sklearn.metrics import accuracy_score from sklearn.metrics import confusion_matrix from sklearn.model_selection import GridSearchCV . SVM . svm_class = SVC() . svm_class.fit(cv_train_mat, y_train) . SVC() . svm_pred = svm_class.predict(cv_test_mat) . Logistic Regression . parameters = {&#39;C&#39;:[0.01, 0.1, 1, 10, 100], &#39;penalty&#39;: [&#39;l1&#39;, &#39;l2&#39;]} log_reg = LogisticRegression() lr = GridSearchCV(log_reg, parameters) . lr.fit(cv_train_mat, y_train) . GridSearchCV(estimator=LogisticRegression(), param_grid={&#39;C&#39;: [0.01, 0.1, 1, 10, 100], &#39;penalty&#39;: [&#39;l1&#39;, &#39;l2&#39;]}) . print(lr.get_params()[&#39;estimator__C&#39;]) print(lr.get_params()[&#39;estimator__penalty&#39;]) . 1.0 l2 . The best value for C is 1.0 and the best penalty is l2 . log_reg_pred = lr.predict(cv_test_mat) . Naive Bayes . mnb = MNB() . mnb.fit(cv_train_mat, y_train) . MultinomialNB() . nb_pred = mnb.predict(cv_test_mat) . Sentiment Analysis Model Evaluation . SVM . score = accuracy_score(y_test, svm_pred) print(score) . 0.7759562841530054 . cm = confusion_matrix(y_test, svm_pred) cm = pd.DataFrame(cm, columns = [&#39;Negative&#39;, &#39;Neutral&#39;, &#39;Positive&#39;], index = [&#39;Negative&#39;, &#39;Neutral&#39;, &#39;Positive&#39;]) cm . Negative Neutral Positive . Negative 1659 | 125 | 30 | . Neutral 250 | 318 | 39 | . Positive 140 | 72 | 295 | . Logistic Regression . score = accuracy_score(y_test, log_reg_pred) print(score) . 0.7899590163934426 . cm = confusion_matrix(y_test, log_reg_pred) cm = pd.DataFrame(cm, columns = [&#39;Negative&#39;, &#39;Neutral&#39;, &#39;Positive&#39;], index = [&#39;Negative&#39;, &#39;Neutral&#39;, &#39;Positive&#39;]) cm . Negative Neutral Positive . Negative 1610 | 152 | 52 | . Neutral 205 | 352 | 50 | . Positive 85 | 71 | 351 | . Naive Bayes . score = accuracy_score(y_test, nb_pred) print(score) . 0.7674180327868853 . cm = confusion_matrix(y_test, nb_pred) cm = pd.DataFrame(cm, columns = [&#39;Negative&#39;, &#39;Neutral&#39;, &#39;Positive&#39;], index = [&#39;Negative&#39;, &#39;Neutral&#39;, &#39;Positive&#39;]) cm . Negative Neutral Positive . Negative 1717 | 67 | 30 | . Neutral 329 | 231 | 47 | . Positive 163 | 45 | 299 | . Conclusion . For the three topics created within each set of tweets, there didn&#39;t appear to be much distinction between each topic. There were a few that had several unique words, but each topic failed to identify anything fundamentally different that the others. When looking at the topics between each cateogry, however, it is clear that there are certain words associated with positive versus neutral verus negative tweets. Positive tweets contain language evoking gratitude and overall positive words like awesome, great, and love. Negative tweets, on the other hand, often used works like cancelled, late, delayed, and worst. . All three methods for predicting sentiment on the test set of tweets resulted in very similar accuracy results with Logistic Regression proving to be the best model. The Support Vector Machine model took much longer to train than the other two, approximately 30 minutes, and yet the results are very much in line with the simpler models. After running GridSeachCV for Logistic Regression with varying values for C and different penalties, it turns out that the best performing parameters were also the default parameters. A further improvement could be to increase the various values for each parameter to see if any improvements could be found. . It should also be noted a pipeline to scale the inputs for each model was used at first, but was later dropped after it was found to decrease the accuracy scores. . References . The data for the project came from this website: https://www.kaggle.com/crowdflower/twitter-airline-sentiment. . For the sklearn models I consulted the sklearn documentation: . LDA: https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.LatentDirichletAllocation.html | SVM: https://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html#sklearn.svm.SVC | Logistic Regression: https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html | Naive Bayes: https://scikit-learn.org/stable/modules/generated/sklearn.naive_bayes.MultinomialNB.html | . In order to create the word clouds I referenced both the wordcloud documentation: https://amueller.github.io/word_cloud/generated/wordcloud.WordCloud.html#wordcloud.WordCloud as well as the datacamp course: https://campus.datacamp.com/courses/sentiment-analysis-in-python. In particular I referenced the &#39;Word Cloud on Movie Reviews&#39; section in part 1 - &#39;Sentiment Analysis Nuts and Bolts.&#39; .",
            "url": "https://neelan.dev/2020/12/18/NLP-Final-Project.html",
            "relUrl": "/2020/12/18/NLP-Final-Project.html",
            "date": " • Dec 18, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "I am Neelan Scheumann and I .",
          "url": "https://neelan.dev/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://neelan.dev/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}